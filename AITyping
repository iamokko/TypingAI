import openai
from dotenv import load_dotenv
import os
import pyperclip
from kivy.app import App
from kivy.uix.boxlayout import BoxLayout
from kivy.uix.textinput import TextInput
from kivy.uix.label import Label
from kivy.uix.button import Button
from kivy.clock import Clock


class CustomTextInput(TextInput):
    def keyboard_on_key_down(self, window, keycode, text, modifiers):
        if keycode[1] == 'enter' and not modifiers:
            App.get_running_app().generate_and_correct_response(None)
        else:
            return super().keyboard_on_key_down(window, keycode, text, modifiers)


class TYPOS_AI(App):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self.conversation = [{"role": "system", "content": "Help me correct below badly typed text, only correct,do not translate, do not explain, try to guess the most correct texts, do not add up.If you cannot guess, just say, you can not guess, please type again"}]
        self.client = openai.OpenAI(api_key=self.get_api_key())

    def get_api_key(self):
        load_dotenv()
        return os.getenv("API_KEY")

    def generate_and_correct_response(self, instance):
        user_input = self.user_input_textinput.text
        self.conversation.append({"role": "user", "content": user_input})
        response = self.client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=self.conversation
        )
        corrected_text = response.choices[0].message.content
        pyperclip.copy(corrected_text)
        self.corrected_text_label.text = "Corrected text (copied to clipboard): " + corrected_text
        print("Before clearing:", self.user_input_textinput.text)
        self.user_input_textinput.text = ''
        self.user_input_textinput.text = self.user_input_textinput.text.strip()  # Clear trailing spaces and newlines
        print("After clearing:", self.user_input_textinput.text)
        # Temporarily adjust the size to force a redraw
        original_size = self.user_input_textinput.size
        self.user_input_textinput.size = (original_size[0], original_size[1] + 1)
        self.user_input_textinput.size = original_size

    def build(self):
        layout = BoxLayout(orientation='vertical')
        
        # Add a label for displaying corrected text, make it responsive and multiline
        self.corrected_text_label = Label(text="Please type badly !", size_hint_y=0.3, halign="center", valign="top")
        self.corrected_text_label.bind(size=self._update_text_width)
        layout.add_widget(self.corrected_text_label)
        
        
        # Add a text input for user input
        self.user_input_textinput = CustomTextInput(multiline=True, size_hint=(1, 0.1), pos_hint={'center_x': 0.5})
        layout.add_widget(self.user_input_textinput)
        
        # Add a button for sending text
        self.send_button = Button(text="Send Text", size_hint=(1, 0.05), pos_hint={'center_x': 0.5}, on_press=self.generate_and_correct_response)
        layout.add_widget(self.send_button)
        
        return layout
    
    def on_keyboard_down(self, instance, keycode, text, modifiers):
        # Adjusted signature
        if keycode[1] == 'enter' and 'shift' not in modifiers:
            self.generate_and_correct_response(instance)
            return True
        elif keycode[1] == 'enter' and 'shift' in modifiers:
            instance.insert_text('\n')
            return True
        return False

    def _update_text_width(self, instance, value):
        # Bind the label's text width to its width to allow text wrapping
        instance.text_size = (instance.width, None)


if __name__ == '__main__':
    TYPOS_AI().run()